CSC.207.02 Assignment 6 (Syamala Gumidyala)Complexity Analysis Write-UpProblem 1 Contains: Claim: T(n) exists in O(n)T(n) = 3 + 8nProof: Let c = 11. 3 + 8n <= 11n3<= 3n1 <= n or n >= 1 therefore there exists T(n) in O(n) such that n >= 1.Problem 2 Fast Exponentiation:T(y) = 3 + T(y/2)T(n) = 3 + T(n/2)T(n/2) = 3 + T(n/4)T(n) = 3 + 3 + T(n/4)T(n/4) = 3 + T(n/8)T(n) = 3 x 3 + T(n/8)T(n) = 3k + T(n/2^k)So T(n) exists in O(logn)Proof: Let n = 2^k and k = logn3logn + T(1)Therefore, 3logn exists in O(logn).Problem 3 All Pairs:Claim: T(n) exists in O(n^2)T(n) = 7 + 3n x 7n = 7 + 21n^2Proof: Let c = 28.7 + 21n^2 <= 28n21n^2 Ð 28n + 7 <= 0n^2 Ð 4/3n  + 1/3 <= 0(n-1)(n-1/3) <= 0So n <=1/3 therefore there exists T(n) in O(n^2) such that n <= 1/3Problem 4 Concat-Replicate:Informal Analysis: T(n) exists in O(n+m)T(n) = 4 + n + 4mThis upper bound comes from the fact that the function contains two nested for loops but one is bound by the condition of the length of the array whereas the other for loop nested inside is bound by the condition of the value n which represents the number of replications for each string in the array.If the string concatenation of two strings of lengthsÊnÊandÊmÊisÊO(n+m), then the resulting time complexity would be T(n) would be O(n+m) + k for the length of the array. So the time complexity does change accordingly.Problem 5 Interleave:Informal Analysis: In the case where the method is given two arrays of different lengths, then T(n) exists in O(n+m). n representing the first for loop and being bound by the condition of 2 x smallerLen and m representing the second for loop bound by the condition of the largerLen. However, if the arrays are of the same length, then T(n) exists in O(n) because the condition will never be met on the second for loop. Therefore, the time will only be processed through n.For the space complexity, if we double the input data, the stack space is not affected. Therefore, the space complexity of this algorithm is constant as O(1) in the worst case scenario.The relationship of the time and space complexity is dependent on the type of function. If the function is recursive or is reliant on multiple different variables for each for loop, then the space complexity will be linear as opposed to constant because the amount of stack space needed is dependent on the input. In cases where the time complexity is quadratic, the space complexity is linear. In cases where the time complexity is linear, the space complexity is constant. This can be described as the space complexity being the first derivative of the time complexity.